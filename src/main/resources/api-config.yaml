# HTTP-specific options.
http:

  # The port on which the HTTP server listens for service requests.
  port: 8000

  # The port on which the HTTP server listens for administrative requests.
  adminPort: 8001

  # Maximum number of threads.
  maxThreads: 100

  # Minimum number of thread to keep alive.
  minThreads: 10

  # The type of connector to use. Other valid values are "nonblocking" or "legacy". In general, the
  # blocking connector should be used for low-latency services with short request durations. The
  # nonblocking connector should be used for services with long request durations or which
  # specifically take advantage of Jetty's continuation support.
  # If you need SSL support, you can either choose from "nonblocking+ssl" or "legacy+ssl".
  connectorType: blocking

  # The maximum amount of time a connection is allowed to be idle before being closed.
  maxIdleTime: 200s

  # The number of threads dedicated to accepting connections. If omitted, this defaults to the
  # number of logical CPUs on the current machine.
  #acceptorThreads: 3

  # The offset of the acceptor threads' priorities. Can be [-5...5], with -5 dropping the acceptor
  # threads to the lowest possible priority and with 5 raising them to the highest priority.
  acceptorThreadPriorityOffset: 0

  # The number of unaccepted requests to keep in the accept queue before refusing connections. If
  # set to -1 or omitted, the system default is used.
  acceptQueueSize: 100

  # The maximum number of buffers to keep in memory.
  maxBufferCount: 1024

  # The initial buffer size for reading requests.
  requestBufferSize: 32KB

  # The initial buffer size for reading request headers.
  requestHeaderBufferSize: 6KB

  # The initial buffer size for writing responses.
  responseBufferSize: 32KB

  # The initial buffer size for writing response headers.
  responseHeaderBufferSize: 6KB

  # Enables SO_REUSEADDR on the server socket.
  reuseAddress: true

  # Enables SO_LINGER on the server socket with the specified linger time.
  soLingerTime: 1s

  # The number of open connections at which the server transitions to a "low-resources" mode.
  lowResourcesConnectionThreshold: 25000

  # When in low-resources mode, the maximum amount of time a connection is allowed to be idle before
  # being closed. Overrides maxIdleTime.
  lowResourcesMaxIdleTime: 5s

  # If non-zero, the server will allow worker threads to finish processing requests after the server
  # socket has been closed for the given amount of time.
  shutdownGracePeriod: 2s

  # If true, the HTTP server will prefer X-Forwarded headers over their non-forwarded equivalents.
  useForwardedHeaders: true

  # If true, forces the HTTP connector to use off-heap, direct buffers.
  useDirectBuffers: true

  # The hostname of the interface to which the HTTP server socket wil be found. If omitted, the
  # socket will listen on all interfaces.
  # bindHost: app1.example.com

#  ssl:
#    keyStore: ./example.keystore
#    keyStorePassword: example
#
#    keyStoreType: JKS # (optional, JKS is default)

  # HTTP request log settings
  requestLog:
    # Settings for logging to stdout.
    console:
      # If true, write log statements to stdout.
      enabled: true

    # Settings for logging to a file.
    file:
      # If true, write log statements to a file.
      enabled: true

      # The file to which statements will be logged.
      currentLogFilename: ./logs/api-request.log

      #  When the log file rolls over, the file will be archived to example-2012-03-15.log.gz,
      # example.log will be truncated, and new statements written to it.
      archivedLogFilenamePattern: ./logs/api-request-%d.log.gz

      # The maximum number of log files to archive.
      archivedFileCount: 5

    # Settings for logging to syslog.
    syslog:

      # If true, write log statements to syslog.
      enabled: false

      # The hostname of the syslog server to which statements will be sent.
      # N.B.: If this is the local host, the local syslog instance will need to be configured to
      # listen on an inet socket, not just a Unix socket.
      host: localhost

      # The syslog facility to which statements will be sent.
      facility: local0

# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level: INFO

  # Logger-specific levels.
  loggers:

    org.hibernate: INFO

    org.hibernate.SQL: INFO
    
    org.hibernate.type: INFO
    
    org.hibernate.tool.hbm2ddl: INFO
    
    org.springframework: INFO
    
    com.demandforce: INFO
    

  # Settings for logging to stdout.
  console:

    # If true, write log statements to stdout.
    enabled: true

    # Do not display log statements below this threshold to stdout.
    threshold: ALL

  # Settings for logging to a file.
  file:

    # If true, write log statements to a file.
    enabled: true

    # Do not write log statements below this threshold to the file.
    threshold: ALL

    # The file to which statements will be logged.
    currentLogFilename: ./logs/api.log

    #  When the log file rolls over, the file will be archived to example-2012-03-15.log.gz,
    # example.log will be truncated, and new statements written to it.
    archivedLogFilenamePattern: ./logs/api-%d.log.gz

    # The maximum number of log files to archive.
    archivedFileCount: 5

  # Settings for logging to syslog.
  syslog:

    # If true, write log statements to syslog.
    enabled: false

    # The hostname of the syslog server to which statements will be sent.
    # N.B.: If this is the local host, the local syslog instance will need to be configured to
    # listen on an inet socket, not just a Unix socket.
    host: localhost

    # The syslog facility to which statements will be sent.
    facility: local0
spring:
    # Spring Context Type (Required)
    # either "file" or "classpath"
    appContextType: classpath
    
    # Spring profile setting
    # development, qa, production 
    springProfiles: 
       - qa 
       - memcachedClientProfile
       
    jndiContextFactory: org.apache.xbean.spring.jndi.SpringInitialContextFactory
    
    # This looks in the classpath automatically
    # Change this to refer to file system for production . Ex) file:///usr/local/df/apps/api/jndi.xml
    jndiProviderUrl: jndi.xml
    
    
    # Spring Config Locations (Required)
    # The location of one or more beans.xml files
    configLocations:
       - api-context.xml
       

    # JAX-RS Resources (Required if you want your service to do anything)
    # one or more spring beans that are JAX-RS resources
    resources:
       - emailFinderResource
       

    # DW Health Checks (Optional, but recommended)
    # list of health check beans (must extend com.yammer.metrics.core.HealthCheck)
    # Currently not doing anything. Can eng ops use it to monitor the system? 

    healthChecks:
       - emailFinderHealthCheck

       
    # Enabled/Disabled Jersey Features (Optional)
    # list of Jersey features to enable/disable
    enabledJerseyFeatures:
        - com.sun.jersey.config.feature.CanonicalizeURIPath

    disabledJerseyFeatures:
       - com.sun.jersey.config.feature.DisableWADL
       
    jerseyProviders:
       - authenticatorProvider
       